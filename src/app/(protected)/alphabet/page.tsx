"use client";
import React, { useState } from "react";
import Head from "next/head";
import { SITE_CONFIG } from "@/constants/site";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

// D·ªØ li·ªáu b·∫£ng ch·ªØ c√°i ti·∫øng Nga
const russianAlphabet = [
  {
    letter: "–ê –∞",
    pronunciation: "a",
    example: "–∞–≤—Ç–æ–±—É—Å (avtobus) - xe bu√Ωt",
    sound: "/sounds/a.mp3",
  },
  {
    letter: "–ë –±",
    pronunciation: "b",
    example: "–±–∞–Ω–∫ (bank) - ng√¢n h√†ng",
    sound: "/sounds/b.mp3",
  },
  {
    letter: "–í –≤",
    pronunciation: "v",
    example: "–≤–æ–¥–∞ (voda) - n∆∞·ªõc",
    sound: "/sounds/v.mp3",
  },
  {
    letter: "–ì –≥",
    pronunciation: "g",
    example: "–≥–æ—Ä–æ–¥ (gorod) - th√†nh ph·ªë",
    sound: "/sounds/g.mp3",
  },
  {
    letter: "–î –¥",
    pronunciation: "d",
    example: "–¥–æ–º (dom) - nh√†",
    sound: "/sounds/d.mp3",
  },
  {
    letter: "–ï –µ",
    pronunciation: "ye",
    example: "–µ–º (yem) - t√¥i ƒÉn",
    sound: "/sounds/ye.mp3",
  },
  {
    letter: "–Å —ë",
    pronunciation: "yo",
    example: "—ë–ª–∫–∞ (yolka) - c√¢y th√¥ng",
    sound: "/sounds/yo.mp3",
  },
  {
    letter: "–ñ –∂",
    pronunciation: "zh",
    example: "–∂–∏–∑–Ω—å (zhizn) - cu·ªôc s·ªëng",
    sound: "/sounds/zh.mp3",
  },
  {
    letter: "–ó –∑",
    pronunciation: "z",
    example: "–∑–∏–º–∞ (zima) - m√πa ƒë√¥ng",
    sound: "/sounds/z.mp3",
  },
  {
    letter: "–ò –∏",
    pronunciation: "i",
    example: "–∏–≥—Ä–∞ (igra) - tr√≤ ch∆°i",
    sound: "/sounds/i.mp3",
  },
  {
    letter: "–ô –π",
    pronunciation: "y",
    example: "–π–æ–≥—É—Ä—Ç (yogurt) - s·ªØa chua",
    sound: "/sounds/y.mp3",
  },
  {
    letter: "–ö –∫",
    pronunciation: "k",
    example: "–∫–æ—Ç (kot) - con m√®o",
    sound: "/sounds/k.mp3",
  },
  {
    letter: "–õ –ª",
    pronunciation: "l",
    example: "–ª–∞–º–ø–∞ (lampa) - ƒë√®n",
    sound: "/sounds/l.mp3",
  },
  {
    letter: "–ú –º",
    pronunciation: "m",
    example: "–º–∞–º–∞ (mama) - m·∫π",
    sound: "/sounds/m.mp3",
  },
  {
    letter: "–ù –Ω",
    pronunciation: "n",
    example: "–Ω–æ—Å (nos) - m≈©i",
    sound: "/sounds/n.mp3",
  },
  {
    letter: "–û –æ",
    pronunciation: "o",
    example: "–æ–∫–Ω–æ (okno) - c·ª≠a s·ªï",
    sound: "/sounds/o.mp3",
  },
  {
    letter: "–ü –ø",
    pronunciation: "p",
    example: "–ø–∞–ø–∞ (papa) - b·ªë",
    sound: "/sounds/p.mp3",
  },
  {
    letter: "–† —Ä",
    pronunciation: "r",
    example: "—Ä—É–∫–∞ (ruka) - tay",
    sound: "/sounds/r.mp3",
  },
  {
    letter: "–° —Å",
    pronunciation: "s",
    example: "—Å–æ–∫ (sok) - n∆∞·ªõc √©p",
    sound: "/sounds/s.mp3",
  },
  {
    letter: "–¢ —Ç",
    pronunciation: "t",
    example: "—Ç–∞–º (tam) - ·ªü ƒë√≥",
    sound: "/sounds/t.mp3",
  },
  {
    letter: "–£ —É",
    pronunciation: "u",
    example: "—É—Ç—Ä–æ (utro) - bu·ªïi s√°ng",
    sound: "/sounds/u.mp3",
  },
  {
    letter: "–§ —Ñ",
    pronunciation: "f",
    example: "—Ñ–æ—Ç–æ (foto) - ·∫£nh",
    sound: "/sounds/f.mp3",
  },
  {
    letter: "–• —Ö",
    pronunciation: "kh",
    example: "—Ö–ª–µ–± (khleb) - b√°nh m√¨",
    sound: "/sounds/kh.mp3",
  },
  {
    letter: "–¶ —Ü",
    pronunciation: "ts",
    example: "—Ü–µ–Ω—Ç—Ä (tsentr) - trung t√¢m",
    sound: "/sounds/ts.mp3",
  },
  {
    letter: "–ß —á",
    pronunciation: "ch",
    example: "—á–∞—Å (chas) - gi·ªù",
    sound: "/sounds/ch.mp3",
  },
  {
    letter: "–® —à",
    pronunciation: "sh",
    example: "—à–∫–æ–ª–∞ (shkola) - tr∆∞·ªùng h·ªçc",
    sound: "/sounds/sh.mp3",
  },
  {
    letter: "–© —â",
    pronunciation: "shch",
    example: "—â–µ–∫–∞ (shcheka) - m√°",
    sound: "/sounds/shch.mp3",
  },
  {
    letter: "–™ —ä",
    pronunciation: "d·∫•u c·ª©ng",
    example: "–æ–±—ä–µ–∫—Ç (obyekt) - ƒë·ªëi t∆∞·ª£ng",
    sound: "/sounds/hard-sign.mp3",
  },
  {
    letter: "–´ —ã",
    pronunciation: "y",
    example: "—Ç—ã (ty) - b·∫°n",
    sound: "/sounds/y-hard.mp3",
  },
  {
    letter: "–¨ —å",
    pronunciation: "d·∫•u m·ªÅm",
    example: "–º–∞—Ç—å (mat') - m·∫π",
    sound: "/sounds/soft-sign.mp3",
  },
  {
    letter: "–≠ —ç",
    pronunciation: "e",
    example: "—ç—Ç–æ (eto) - c√°i n√†y",
    sound: "/sounds/e.mp3",
  },
  {
    letter: "–Æ —é",
    pronunciation: "yu",
    example: "—é–≥ (yug) - ph√≠a nam",
    sound: "/sounds/yu.mp3",
  },
  {
    letter: "–Ø —è",
    pronunciation: "ya",
    example: "—è–±–ª–æ–∫–æ (yabloko) - qu·∫£ t√°o",
    sound: "/sounds/ya.mp3",
  },
];

// Ph√¢n lo·∫°i ch·ªØ c√°i theo nh√≥m
const alphabetGroups = {
  group1: ["–ê", "–ö", "–ú", "–û", "–¢"],
  group2: ["–í", "–ï", "–ù", "–†", "–°", "–£", "–•"],
  group3: [
    "–ë",
    "–ì",
    "–î",
    "–ñ",
    "–ó",
    "–ò",
    "–ô",
    "–õ",
    "–ü",
    "–§",
    "–¶",
    "–ß",
    "–®",
    "–©",
    "–™",
    "–´",
    "–¨",
    "–≠",
    "–Æ",
    "–Ø",
  ],
};

// Ph∆∞∆°ng ph√°p h·ªçc hi·ªáu qu·∫£
const learningMethods = [
  {
    title: "Ph∆∞∆°ng ph√°p 5 b∆∞·ªõc",
    icon: "üìù",
    description:
      "Ph∆∞∆°ng ph√°p h·ªçc b·∫£ng ch·ªØ c√°i ti·∫øng Nga hi·ªáu qu·∫£ qua 5 b∆∞·ªõc ƒë∆°n gi·∫£n",
    steps: [
      "B∆∞·ªõc 1: H·ªçc c√°ch ph√°t √¢m t·ª´ng ch·ªØ c√°i",
      "B∆∞·ªõc 2: T·∫≠p vi·∫øt ch·ªØ c√°i (c·∫£ in hoa v√† th∆∞·ªùng)",
      "B∆∞·ªõc 3: H·ªçc c√°c t·ª´ ƒë∆°n gi·∫£n b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i ƒë√≥",
      "B∆∞·ªõc 4: T·∫°o flashcards ƒë·ªÉ √¥n t·∫≠p h√†ng ng√†y",
      "B∆∞·ªõc 5: Luy·ªán nghe v√† ph√°t √¢m th∆∞·ªùng xuy√™n",
    ],
  },
  {
    title: "Ph√¢n nh√≥m ch·ªØ c√°i",
    icon: "üîç",
    description: "Chia b·∫£ng ch·ªØ c√°i th√†nh c√°c nh√≥m nh·ªè ƒë·ªÉ h·ªçc d·ªÖ d√†ng h∆°n:",
    groups: [
      "Nh√≥m 1: Ch·ªØ c√°i gi·ªëng ti·∫øng Anh v·ªÅ h√¨nh d·∫°ng v√† √¢m thanh (–ê, –ö, –ú, –û, –¢)",
      "Nh√≥m 2: Ch·ªØ c√°i gi·ªëng ti·∫øng Anh v·ªÅ h√¨nh d·∫°ng nh∆∞ng kh√°c √¢m thanh (–í, –ï, –ù, –†, –°, –£, –•)",
      "Nh√≥m 3: Ch·ªØ c√°i kh√°c ti·∫øng Anh ho√†n to√†n (–ë, –ì, –î, –ñ, –ó, –ò, –ô, –õ, –ü, –§, –¶, –ß, –®, –©, –™, –´, –¨, –≠, –Æ, –Ø)",
    ],
  },
  {
    title: "L·ªãch tr√¨nh h·ªçc t·ªëi ∆∞u",
    icon: "üìÖ",
    description: "K·∫ø ho·∫°ch h·ªçc t·∫≠p hi·ªáu qu·∫£ theo th·ªùi gian",
    schedule: [
      "Ng√†y 1-3: T·∫≠p trung v√†o nh√≥m 1 (5 ch·ªØ c√°i)",
      "Ng√†y 4-10: H·ªçc nh√≥m 2 (7 ch·ªØ c√°i)",
      "Ng√†y 11-30: H·ªçc nh√≥m 3 (20 ch·ªØ c√°i)",
      "M·ªói ng√†y d√†nh 20-30 ph√∫t ƒë·ªÉ √¥n t·∫≠p c√°c ch·ªØ c√°i ƒë√£ h·ªçc",
      "Cu·ªëi tu·∫ßn d√†nh 1 gi·ªù ƒë·ªÉ √¥n t·∫≠p t·ªïng h·ª£p",
    ],
  },
  {
    title: "C√¥ng c·ª• h·ªçc t·∫≠p hi·ªáu qu·∫£",
    icon: "üõ†Ô∏è",
    description: "C√°c c√¥ng c·ª• v√† t√†i nguy√™n h·ªó tr·ª£ vi·ªác h·ªçc b·∫£ng ch·ªØ c√°i",
    tools: [
      "·ª®ng d·ª•ng di ƒë·ªông: Duolingo, Memrise, Russian Alphabet Mastery",
      "Flashcards (th·∫ª ghi nh·ªõ): Anki, Quizlet",
      "S√°ch tham kh·∫£o: The New Penguin Russian Course",
      "K√™nh YouTube: Russian From Russia, Be Fluent in Russian",
      "Podcast: Russian Made Easy, RussianPod101",
    ],
  },
];

export default function AlphabetPage() {
  const [hoveredLetter, setHoveredLetter] = useState<string | null>(null);

  return (
    <>
      <Head>
        <title>B·∫£ng ch·ªØ c√°i ti·∫øng Nga | {SITE_CONFIG.name}</title>
        <meta
          name="description"
          content="H·ªçc b·∫£ng ch·ªØ c√°i ti·∫øng Nga v√† ph∆∞∆°ng ph√°p h·ªçc hi·ªáu qu·∫£"
        />
      </Head>

      <div className="w-full">
        {/* Hero Section */}
        <div className="text-center mb-16">
          <h1 className="text-4xl md:text-5xl font-bold mb-6 text-foreground">
            B·∫£ng ch·ªØ c√°i ti·∫øng Nga
          </h1>

          <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
            B·∫£ng ch·ªØ c√°i ti·∫øng Nga (–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ - Kirillitsa) g·ªìm 33 ch·ªØ c√°i. D∆∞·ªõi
            ƒë√¢y l√† to√†n b·ªô b·∫£ng ch·ªØ c√°i c√πng c√°ch ph√°t √¢m v√† v√≠ d·ª• ƒë·ªÉ b·∫°n h·ªçc
            hi·ªáu qu·∫£.
          </p>
        </div>

        {/* Tabs for Alphabet Groups */}
        <Tabs defaultValue="all" className="mb-12">
          <TabsList className="w-full flex justify-center mb-8">
            <TabsTrigger value="all">T·∫•t c·∫£ ch·ªØ c√°i</TabsTrigger>
            <TabsTrigger value="group1">Nh√≥m 1 (Gi·ªëng ti·∫øng Anh)</TabsTrigger>
            <TabsTrigger value="group2">Nh√≥m 2 (Gi·ªëng h√¨nh d·∫°ng)</TabsTrigger>
            <TabsTrigger value="group3">Nh√≥m 3 (Kh√°c ho√†n to√†n)</TabsTrigger>
          </TabsList>

          <TabsContent value="all" className="mt-0">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {russianAlphabet.map((item, index) => (
                <AlphabetCard
                  key={index}
                  item={item}
                  hoveredLetter={hoveredLetter}
                  setHoveredLetter={setHoveredLetter}
                />
              ))}
            </div>
          </TabsContent>

          <TabsContent value="group1" className="mt-0">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {russianAlphabet
                .filter((item) =>
                  alphabetGroups.group1.includes(item.letter.charAt(0))
                )
                .map((item, index) => (
                  <AlphabetCard
                    key={index}
                    item={item}
                    hoveredLetter={hoveredLetter}
                    setHoveredLetter={setHoveredLetter}
                    groupColor="sky"
                  />
                ))}
            </div>
          </TabsContent>

          <TabsContent value="group2" className="mt-0">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {russianAlphabet
                .filter((item) =>
                  alphabetGroups.group2.includes(item.letter.charAt(0))
                )
                .map((item, index) => (
                  <AlphabetCard
                    key={index}
                    item={item}
                    hoveredLetter={hoveredLetter}
                    setHoveredLetter={setHoveredLetter}
                    groupColor="blue"
                  />
                ))}
            </div>
          </TabsContent>

          <TabsContent value="group3" className="mt-0">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {russianAlphabet
                .filter((item) =>
                  alphabetGroups.group3.includes(item.letter.charAt(0))
                )
                .map((item, index) => (
                  <AlphabetCard
                    key={index}
                    item={item}
                    hoveredLetter={hoveredLetter}
                    setHoveredLetter={setHoveredLetter}
                    groupColor="indigo"
                  />
                ))}
            </div>
          </TabsContent>
        </Tabs>

        {/* Learning Methods Section */}
        <div className="mb-16">
          <h2 className="text-3xl font-bold text-center mb-10 text-foreground">
            Ph∆∞∆°ng ph√°p h·ªçc b·∫£ng ch·ªØ c√°i ti·∫øng Nga hi·ªáu qu·∫£
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {learningMethods.map((method, index) => (
              <Card key={index} className="border border-border">
                <CardHeader>
                  <div className="flex items-center gap-3">
                    <span className="text-3xl">{method.icon}</span>
                    <CardTitle>{method.title}</CardTitle>
                  </div>
                  <CardDescription>{method.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {method.steps &&
                      method.steps.map((step, idx) => (
                        <li
                          key={idx}
                          className="text-foreground flex items-start"
                        >
                          <span className="text-primary mr-2">‚Ä¢</span>
                          <span>{step}</span>
                        </li>
                      ))}

                    {method.groups &&
                      method.groups.map((group, idx) => (
                        <li
                          key={idx}
                          className="text-foreground flex items-start"
                        >
                          <span className="text-primary mr-2">‚Ä¢</span>
                          <span>{group}</span>
                        </li>
                      ))}

                    {method.schedule &&
                      method.schedule.map((item, idx) => (
                        <li
                          key={idx}
                          className="text-foreground flex items-start"
                        >
                          <span className="text-primary mr-2">‚Ä¢</span>
                          <span>{item}</span>
                        </li>
                      ))}

                    {method.tools &&
                      method.tools.map((tool, idx) => (
                        <li
                          key={idx}
                          className="text-foreground flex items-start"
                        >
                          <span className="text-primary mr-2">‚Ä¢</span>
                          <span>{tool}</span>
                        </li>
                      ))}
                  </ul>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Expert Advice Section */}
        <Card className="bg-sky-500 text-white mb-16">
          <CardHeader>
            <CardTitle className="text-center">
              L·ªùi khuy√™n t·ª´ chuy√™n gia
            </CardTitle>
          </CardHeader>
          <CardContent className="max-w-3xl mx-auto">
            <p className="mb-4">
              H·ªçc b·∫£ng ch·ªØ c√°i l√† b∆∞·ªõc ƒë·∫ßu ti√™n v√† quan tr·ªçng nh·∫•t khi h·ªçc ti·∫øng
              Nga. H√£y d√†nh th·ªùi gian ƒë·ªÉ th√†nh th·∫°o c√°ch ph√°t √¢m v√† nh·∫≠n di·ªán
              t·ª´ng ch·ªØ c√°i tr∆∞·ªõc khi chuy·ªÉn sang h·ªçc t·ª´ v·ª±ng v√† ng·ªØ ph√°p.
            </p>
            <p className="mb-4">
              N√™n k·∫øt h·ª£p nhi·ªÅu ph∆∞∆°ng ph√°p h·ªçc kh√°c nhau: nghe, nh√¨n, vi·∫øt v√†
              n√≥i. ƒêi·ªÅu n√†y gi√∫p n√£o b·ªô ghi nh·ªõ th√¥ng tin t·ªët h∆°n v√† l√¢u h∆°n.
            </p>
            <p>
              H√£y ki√™n nh·∫´n v√† th·ª±c h√†nh ƒë·ªÅu ƒë·∫∑n m·ªói ng√†y. Ch·ªâ c·∫ßn 15-30 ph√∫t
              m·ªói ng√†y, b·∫°n s·∫Ω th√†nh th·∫°o b·∫£ng ch·ªØ c√°i ti·∫øng Nga trong v√≤ng 2-4
              tu·∫ßn.
            </p>
          </CardContent>
        </Card>

        {/* Call to Action */}
        <div className="text-center">
          <h3 className="text-2xl font-bold mb-6 text-foreground">
            B·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc ti·∫øng Nga c·ªßa b·∫°n ngay h√¥m nay!
          </h3>
          <Button size="lg" className="px-8 bg-blue-600 hover:bg-blue-700">
            B·∫Øt ƒë·∫ßu h·ªçc ngay
          </Button>
        </div>
      </div>
    </>
  );
}

// Component cho th·∫ª ch·ªØ c√°i
function AlphabetCard({
  item,
  hoveredLetter,
  setHoveredLetter,
  groupColor,
}: {
  item: (typeof russianAlphabet)[0];
  hoveredLetter: string | null;
  setHoveredLetter: (letter: string | null) => void;
  groupColor?: "sky" | "blue" | "indigo";
}) {
  const isHovered = hoveredLetter === item.letter;

  let colorClasses = "";
  if (groupColor === "sky") {
    colorClasses = "border-sky-200 bg-sky-50 hover:border-sky-300";
  } else if (groupColor === "blue") {
    colorClasses = "border-blue-200 bg-blue-50 hover:border-blue-300";
  } else if (groupColor === "indigo") {
    colorClasses = "border-indigo-200 bg-indigo-50 hover:border-indigo-300";
  }

  return (
    <Card
      className={cn(
        "border-2 overflow-hidden transition-all duration-300",
        colorClasses,
        isHovered ? "scale-105 shadow-lg" : ""
      )}
      onMouseEnter={() => setHoveredLetter(item.letter)}
      onMouseLeave={() => setHoveredLetter(null)}
    >
      <CardContent className="p-6">
        <div className="text-5xl font-bold text-center mb-4 text-primary">
          {item.letter}
        </div>
        <div className="h-0.5 w-16 bg-primary/30 mx-auto mb-4"></div>
        <p className="mb-2">
          <span className="font-semibold">Ph√°t √¢m:</span> {item.pronunciation}
        </p>
        <p>
          <span className="font-semibold">V√≠ d·ª•:</span> {item.example}
        </p>
        {/* <div className="mt-4 text-center">
          <audio controls src={item.sound} className="w-full">
            Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ph√°t √¢m thanh
          </audio>
        </div> */}
      </CardContent>
    </Card>
  );
}
